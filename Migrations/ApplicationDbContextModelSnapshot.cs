// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using zamara.Data;

#nullable disable

namespace zamara.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.1");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0b3463a2-0c6e-4a29-86cd-352a972e127a",
                            ConcurrencyStamp = "ce931254-693e-448f-9613-a31d67fb9823",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "839e2c44-75b2-47d1-a280-1b40fa101dbf",
                            ConcurrencyStamp = "a759811d-3f72-4eab-a1a9-e9d4b1022cc9",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = "db7e5c48-b9b9-4225-89d9-9e48dfe12361",
                            ConcurrencyStamp = "59bc4bc5-7ece-4019-9bb2-145f968cbe20",
                            Name = "User1",
                            NormalizedName = "USER1"
                        },
                        new
                        {
                            Id = "31123878-9202-4d18-b968-14941124892e",
                            ConcurrencyStamp = "829e5954-e076-4919-b04d-e2727c2f82cc",
                            Name = "User2",
                            NormalizedName = "USE2"
                        },
                        new
                        {
                            Id = "c5119adf-4a5a-41b0-886b-55b12994fceb",
                            ConcurrencyStamp = "8cf4c607-3ec9-4d28-9592-4224f2369341",
                            Name = "User3",
                            NormalizedName = "USER3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "bc00907f-6b2b-4e2f-bd1c-0dc77965de3b",
                            RoleId = "db7e5c48-b9b9-4225-89d9-9e48dfe12361"
                        },
                        new
                        {
                            UserId = "7e3ebd93-7e28-45e0-b638-7ce99299d850",
                            RoleId = "31123878-9202-4d18-b968-14941124892e"
                        },
                        new
                        {
                            UserId = "d53b4055-8b95-430f-82bb-3cd8e86421be",
                            RoleId = "c5119adf-4a5a-41b0-886b-55b12994fceb"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Zamara.Models.Staff", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Claims")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Department")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Photo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Policy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Salary")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("StaffNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "bc00907f-6b2b-4e2f-bd1c-0dc77965de3b",
                            AccessFailedCount = 0,
                            Claims = "Staff,Posts,Reports",
                            ConcurrencyStamp = "a41afbf3-262a-4dbf-b604-c9783fb9e1a8",
                            Department = "",
                            Email = "jk@zamara.co.ke",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "James Kimani",
                            NormalizedEmail = "JK@ZAMARA.CO.KE",
                            NormalizedUserName = "JK@ZAMARA.CO.KE",
                            PasswordHash = "AQAAAAEAACcQAAAAED/odenJsXQ1pLuSfLm6tWnm/lO/yDUikGl1AUBPdxdge07VnaSASM0JoMmG+jhDqw==",
                            PhoneNumberConfirmed = false,
                            Policy = "WebPolicy",
                            SecurityStamp = "13e2233c-6105-493a-9ed1-48f63a8196b7",
                            TwoFactorEnabled = false,
                            UserName = "jk@zamara.co.ke"
                        },
                        new
                        {
                            Id = "7e3ebd93-7e28-45e0-b638-7ce99299d850",
                            AccessFailedCount = 0,
                            Claims = "Staff,Continents,Reports",
                            ConcurrencyStamp = "14d28e84-b228-4f99-94d1-f0471967d595",
                            Department = "",
                            Email = "sa@zamara.co.ke",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Stephen Achieng",
                            NormalizedEmail = "SA@ZAMARA.CO.KE",
                            NormalizedUserName = "SA@ZAMARA.CO.KE",
                            PasswordHash = "AQAAAAEAACcQAAAAELvnwx1czm/GzxmatrgvXqwCsh3AixCtvX0IH/POwHQRN1/oRmxdc8cqNQuHHK8Egg==",
                            PhoneNumberConfirmed = false,
                            Policy = "WebPolicy",
                            SecurityStamp = "7ff0af33-9e5b-4466-98d2-22eb3e8a270e",
                            TwoFactorEnabled = false,
                            UserName = "sa@zamara.co.ke"
                        },
                        new
                        {
                            Id = "d53b4055-8b95-430f-82bb-3cd8e86421be",
                            AccessFailedCount = 0,
                            Claims = "Staff,Continents,Reports",
                            ConcurrencyStamp = "ab01be7e-0bd8-4500-bb6f-332ca4f28846",
                            Department = "",
                            Email = "so@zamara.co.ke",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Samuel Okutoyi",
                            NormalizedEmail = "SO@ZAMARA.CO.KE",
                            NormalizedUserName = "SO@ZAMARA.CO.KE",
                            PasswordHash = "AQAAAAEAACcQAAAAEPYtDctvxE9uWw2I2DLCp3Jfj7+gPkiB0JlT/jxAt9G9OjjOL8p3H6k8g+c60A3zag==",
                            PhoneNumberConfirmed = false,
                            Policy = "WebPolicy",
                            SecurityStamp = "1b11fd05-62a7-4aeb-ab6e-00edcf9549e8",
                            TwoFactorEnabled = false,
                            UserName = "so@zamara.co.ke"
                        });
                });

            modelBuilder.Entity("zamara.Models.StaffFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Data")
                        .HasColumnType("BLOB");

                    b.Property<string>("Extension")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("StaffFiles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Zamara.Models.Staff", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Zamara.Models.Staff", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zamara.Models.Staff", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Zamara.Models.Staff", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
